#!/usr/bin/env bash

#-------------------------------------------------------------------------------
# Arguments Check
#-------------------------------------------------------------------------------

# Scripts with a prefix of "dotfiles-" will be listed and executed if the user,
# for example, executes "dotfiles osx" to run "dotfiles-osx". Otherwise, show
# a "help" message.
platforms=($(compgen -c | grep "dotfiles-" | sed "s/dotfiles-//g"))

if [[ $1 ]]; then
  for ((i = 0; i < ${#platforms}; i++)); do
    if [[ ${platforms[$i]} = $1 ]]; then
      platform="dotfiles-$1"
      break
    fi
  done
  if [[ $platform ]]; then
    "$platform"
    exit 0
  else
    echo "Usage: $(basename "$0") [platform]"
    echo
    echo "Platforms available: $(echo ${platforms[@]})"
    echo
    echo "See the README for documentation."
    echo "https://github.com/bentruyman/dotfiles"
    exit 1
  fi
fi

#-------------------------------------------------------------------------------
# Functions
#-------------------------------------------------------------------------------

notice() { echo -e "\033[1;32m=> $1\033[0m"; }
error()  { echo -e "\033[1;31m=> Error: $1\033[0m"; }
c_list() { echo -e "  \033[1;32m✔\033[0m $1"; }
e_list() { echo -e "  \033[1;31m✖\033[0m $1"; }

backup() {
  notice "Backing up to: $backup_dir"
  mkdir -p "$backup_dir"
  mv "$dotfiles_dir" "$backup_dir"
}

header_init() { notice "Initializing environment"; }
do_init() {
  source "$2"
}

header_link() { notice "Linking files into home directory"; }
test_link() { [[ "$2" -ef "$1" ]] && echo "same file"; }
do_link() {
  c_list "Linking ~/$1."

  if [[ -d "$HOME/$1" ]]; then
    rm -rf "$HOME/$1"
  fi

  ln -sf ${2#$HOME/} $HOME
}

task_do() {
  local base dest skip
  local files=($HOME/.dotfiles/$1/*)

  # If no files exist, abort
  if (( ${#files[@]} == 0 )); then return; fi

  # Run header function if one has been declared
  [[ $(declare -f "header_$1") ]] && "header_$1"

  for file in "${files[@]}"; do
    base="$(basename $file)"
    dest="$HOME/$base"

    # Run test function if one has been declared to filter out certain files
    if [[ "$(declare -f test_$1)" ]]; then
      skip="$("test_$1" "$file" "$dest")"

      if [[ "$skip" ]]; then
        e_list "Skipping ~/$base, $skip."
        continue
      fi
    fi

    # Run task for file
    "do_$1" "$base" "$file"
  done
}

install() {
  task_do "init"
  task_do "link"
}

program_exists() {
  if [ "$(type -P $1)" ]; then
    return 0
  fi
  return 1
}

to_install() {
  local desired installed i desired_s installed_s remain

  # Convert args to arrays handling newline- and space-delimited lists
  read -ra desired < <(echo "$1" | tr '\n' ' ')
  read -ra installed < <(echo "$2" | tr '\n' ' ')

  # Sort "desired" and "installed" lists
  unset i; while read -r; do desired_s[i++]=$REPLY; done < <(
    printf "%s\n" "${desired[@]}" | sort
  )
  unset i; while read -r; do installed_s[i++]=$REPLY; done < <(
    printf "%s\n" "${installed[@]}" | sort
  )

  # Remove "installed" items from "desired" list
  unset i; while read -r; do remain[i++]=$REPLY; done < <(
    comm -13 <(printf "%s\n" "${installed_s[@]}") <(printf "%s\n" "${desired_s[@]}")
  )

  echo "${remain[@]}"
}

#-------------------------------------------------------------------------------
# Initialize
#-------------------------------------------------------------------------------

backup_dir="$HOME/.dotfiles-backup/$(date "+%Y%m%d%H%M.%S")"
dotfiles_dir="$HOME/.dotfiles"

is_osx() { [[ "$OSTYPE" =~ ^darwin ]] || return 1; }
is_ubuntu() { [[ "$(cat /etc/issue 2> /dev/null)" =~ Ubuntu ]] || return 1; }

shopt -s dotglob
shopt -s nullglob

#-------------------------------------------------------------------------------
# Dependencies
#-------------------------------------------------------------------------------

if ! program_exists "git"; then
  if is_osx; then
    if ! program_exists "brew"; then
      notice "Installing Homebrew"
      true | /usr/bin/ruby -e "$(/usr/bin/curl -fsSL https://raw.github.com/mxcl/homebrew/go)"
    fi
    if program_exists "brew"; then
      notice "Updating Homebrew"
      brew update
      notice "Installing Git"
      brew install git
    fi
  elif is_ubuntu; then
    notice "Installing Git"
    sudo apt-get -qq install git-core
  fi
fi

if ! program_exists "git"; then
  error "Git is still not installed. Aborting"
  exit 1
fi

#-------------------------------------------------------------------------------
# Install
#-------------------------------------------------------------------------------

if [ ! -d "$dotfiles_dir" ]; then
  notice "Downloading dotfiles"
  git clone --recursive git://github.com/bentruyman/dotfiles.git $HOME/.dotfiles

  pushd $HOME/.dotfiles &> /dev/null

  notice "Installing dotfiles"
  install
else
  pushd $HOME/.dotfiles &> /dev/null

  notice "Updating dotfiles"
  git pull origin master
  git submodule update --init --recursive --quiet

  notice "Installing dotfiles"
  install
fi

#-------------------------------------------------------------------------------
# Finish
#-------------------------------------------------------------------------------

popd &> /dev/null
notice "Done!"
exec `which fish` -l
